# -*- coding: utf-8 -*-
"""Stock price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qdLOX_9JkwTFeIg5iryk9bbSi79gEChB
"""

import math
import pandas_datareader as web
import numpy as np 
import pandas as pd
from sklearn.preprocessing import MinMaxScaler 
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Get the stock information 
df=web.DataReader('Goog', data_source='yahoo', start='2003-01-01', end='2020-11-13')
#Show the data
df

df.shape

plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=17)
plt.ylabel('Close Price USD', fontsize=17)
plt.show()

#Create new dataframe with the close column 
data=df.filter(['Close'])
#Convert data to a numpy array
dataset=data.values
#Get the number of rows to train the model 
training_data_len=math.ceil(len(dataset)*.8)
training_data_len

#Scale the data 
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)
scaled_data

#Creating scaled training dataset
train_data=scaled_data[0:training_data_len,:]
#Split data into x_train and y_train data set 
x_train=[]
y_train=[]
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=60:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy array
x_train,y_train=np.array(x_train),np.array(y_train)

#Reshape the data
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model=Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#Train the model
model.fit(x_train,y_train, batch_size=1, epochs=1)

#create a testing dataset
#Create a new array containing scaled values 
test_data=scaled_data[training_data_len-60:,:]
#create a dataset x_test and y_test
x_test=[]
y_test=dataset[training_data_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#convert the data to a numpy array
x_test=np.array(x_test)
#Reshape the data(Currently it is 2 dimentional and LSTM model requires three dimentions)
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#get the models predicted price values 
predictions=model.predict(x_test)
predictions=scaler.inverse_transform(predictions)

rmse=np.sqrt(np.mean(predictions-y_test)**2)
rmse

train=data[:training_data_len]
valid=data[training_data_len:]
valid['predictions']=predictions
#Visualize the data 
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Data', fontsize=19)
plt.ylabel('Close Price USD', fontsize=19)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

x_test=scaler.inverse_transform(x_test)